
test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013cc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000883  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000220  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00001ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004d  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018279  00000000  00000000  00001f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009d5  00000000  00000000  0001a1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000884d5  00000000  00000000  0001abb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a3088  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000d8  00000000  00000000  000a30cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000a31a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003ac 	.word	0x080003ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003ac 	.word	0x080003ac

080001c8 <ClockConfig>:
#include "stm32f4xx.h"



void ClockConfig(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
unsigned int i;
  for (i=0;i<0x00100000;i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <ClockConfig+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80001e0:	d3f8      	bcc.n	80001d4 <ClockConfig+0xc>
  RCC->CFGR |= 0x00009400;        												// AHB ve APB hizlari max
 80001e2:	4b20      	ldr	r3, [pc, #128]	@ (8000264 <ClockConfig+0x9c>)
 80001e4:	689b      	ldr	r3, [r3, #8]
 80001e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000264 <ClockConfig+0x9c>)
 80001e8:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 80001ec:	6093      	str	r3, [r2, #8]
  RCC->CR |= 0x00010000;          												// HSE Xtal Osc Enable
 80001ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000264 <ClockConfig+0x9c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000264 <ClockConfig+0x9c>)
 80001f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001f8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & 0x00020000));												// Xtal Osc stabilizasyon
 80001fa:	bf00      	nop
 80001fc:	4b19      	ldr	r3, [pc, #100]	@ (8000264 <ClockConfig+0x9c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000204:	2b00      	cmp	r3, #0
 8000206:	d0f9      	beq.n	80001fc <ClockConfig+0x34>
  RCC->PLLCFGR = 0x07402A04;      												// PLL katsayilari ayarlandi.
 8000208:	4b16      	ldr	r3, [pc, #88]	@ (8000264 <ClockConfig+0x9c>)
 800020a:	4a17      	ldr	r2, [pc, #92]	@ (8000268 <ClockConfig+0xa0>)
 800020c:	605a      	str	r2, [r3, #4]
  RCC->CR |= 0x01000000;          												// PLL start
 800020e:	4b15      	ldr	r3, [pc, #84]	@ (8000264 <ClockConfig+0x9c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a14      	ldr	r2, [pc, #80]	@ (8000264 <ClockConfig+0x9c>)
 8000214:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000218:	6013      	str	r3, [r2, #0]
  while(!(RCC->CR & 0x02000000)); 												// PLL ready wait
 800021a:	bf00      	nop
 800021c:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <ClockConfig+0x9c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0f9      	beq.n	800021c <ClockConfig+0x54>
  FLASH->ACR = 0x00000605;        												// Flash ROM icin 5 Wait state secelim ve ART aktif
 8000228:	4b10      	ldr	r3, [pc, #64]	@ (800026c <ClockConfig+0xa4>)
 800022a:	f240 6205 	movw	r2, #1541	@ 0x605
 800022e:	601a      	str	r2, [r3, #0]
  RCC->CFGR |= 0x00000002;        												// CLK u PLL uzerinden besleyelim
 8000230:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <ClockConfig+0x9c>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4a0b      	ldr	r2, [pc, #44]	@ (8000264 <ClockConfig+0x9c>)
 8000236:	f043 0302 	orr.w	r3, r3, #2
 800023a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & 0x0000000F) != 0x0000000A); 								// Besleninceye kadar bekle
 800023c:	bf00      	nop
 800023e:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <ClockConfig+0x9c>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	2b0a      	cmp	r3, #10
 8000248:	d1f9      	bne.n	800023e <ClockConfig+0x76>
  RCC->AHB1ENR |= 0x0000003F; 												// All Port Clock enable
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <ClockConfig+0x9c>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <ClockConfig+0x9c>)
 8000250:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	07402a04 	.word	0x07402a04
 800026c:	40023c00 	.word	0x40023c00

08000270 <main>:

int main(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	ClockConfig();
 8000274:	f7ff ffa8 	bl	80001c8 <ClockConfig>

	GPIOD->MODER		|=  (1UL << 12*2);
 8000278:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <main+0x78>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1a      	ldr	r2, [pc, #104]	@ (80002e8 <main+0x78>)
 800027e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000282:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER 		&= ~(1UL << 12*1);
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <main+0x78>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <main+0x78>)
 800028a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800028e:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR		|=	(3UL << 12*2);
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <main+0x78>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a14      	ldr	r2, [pc, #80]	@ (80002e8 <main+0x78>)
 8000296:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800029a:	6093      	str	r3, [r2, #8]
  	GPIOD->PUPDR	  	&= ~(3UL << 12*2);
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <main+0x78>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a11      	ldr	r2, [pc, #68]	@ (80002e8 <main+0x78>)
 80002a2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80002a6:	60d3      	str	r3, [r2, #12]

	GPIOD->MODER		|=  (1UL << 13*2);
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <main+0x78>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <main+0x78>)
 80002ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER 		&= ~(1UL << 13*1);
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <main+0x78>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <main+0x78>)
 80002ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002be:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR		|=	(3UL << 13*2);
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <main+0x78>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <main+0x78>)
 80002c6:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 80002ca:	6093      	str	r3, [r2, #8]
  	GPIOD->PUPDR	  	&= ~(3UL << 13*2);
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <main+0x78>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <main+0x78>)
 80002d2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002d6:	60d3      	str	r3, [r2, #12]


    while (1) {
		GPIOD->ODR			|=	 (1UL << 13);
 80002d8:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <main+0x78>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a02      	ldr	r2, [pc, #8]	@ (80002e8 <main+0x78>)
 80002de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e2:	6153      	str	r3, [r2, #20]
 80002e4:	e7f8      	b.n	80002d8 <main+0x68>
 80002e6:	bf00      	nop
 80002e8:	40020c00 	.word	0x40020c00

080002ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <SystemInit+0x20>)
 80002f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002f6:	4a05      	ldr	r2, [pc, #20]	@ (800030c <SystemInit+0x20>)
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f7ff ffea 	bl	80002ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff95 	bl	8000270 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	@ (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	@ (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	@ (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	@ (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
